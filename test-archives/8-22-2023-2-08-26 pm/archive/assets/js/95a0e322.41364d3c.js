"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[1636],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,m=u["".concat(l,".").concat(d)]||u[d]||f[d]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9247:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(7294),r=n(6010),o="tabItem_Ymn6",i=Object.defineProperty,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;function u({children:e,hidden:t,className:n}){return a.createElement("div",((e,t)=>{for(var n in t||(t={}))l.call(t,n)&&c(e,n,t[n]);if(s)for(var n of s(t))p.call(t,n)&&c(e,n,t[n]);return e})({role:"tabpanel",className:(0,r.Z)(o,n)},{hidden:t}),e)}},4023:function(e,t,n){n.d(t,{Z:function(){return B}});var a=n(7294),r=n(6010),o=n(7287),i=n(6550),s=n(3962),l=n(9920),p=n(5801),c=Object.defineProperty,u=Object.defineProperties,f=Object.getOwnPropertyDescriptors,d=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,g=Object.prototype.propertyIsEnumerable,h=(e,t,n)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;function b(e){return function(e){var t,n;return null!=(n=null==(t=a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))?n:[]}(e).map((({props:{value:e,label:t,attributes:n,default:a}})=>({value:e,label:t,attributes:n,default:a})))}function k(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=null!=t?t:b(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function y({value:e,tabValues:t}){return t.some((t=>t.value===e))}function N({queryString:e=!1,groupId:t}){const n=(0,i.k6)(),r=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:e,groupId:t});return[(0,s._X)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);var a,o;t.set(r,e),n.replace((a=((e,t)=>{for(var n in t||(t={}))m.call(t,n)&&h(e,n,t[n]);if(d)for(var n of d(t))g.call(t,n)&&h(e,n,t[n]);return e})({},n.location),o={search:t.toString()},u(a,f(o))))}),[r,n])]}function v(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=k(e),[i,s]=(0,a.useState)((()=>function({defaultValue:e,tabValues:t}){var n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!y({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=null!=(n=t.find((e=>e.default)))?n:t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,c]=N({queryString:n,groupId:r}),[u,f]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,r]=(0,p.Nk)(t);return[n,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:r}),d=(()=>{const e=null!=l?l:u;return y({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{d&&s(d)}),[d]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!y({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),f(e)}),[c,f,o]),tabValues:o}}var w=n(5710),x="tabList__CuJ",C="tabItem_LNqP",O=Object.defineProperty,j=Object.defineProperties,T=Object.getOwnPropertyDescriptors,P=Object.getOwnPropertySymbols,E=Object.prototype.hasOwnProperty,S=Object.prototype.propertyIsEnumerable,I=(e,t,n)=>t in e?O(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,D=(e,t)=>{for(var n in t||(t={}))E.call(t,n)&&I(e,n,t[n]);if(P)for(var n of P(t))S.call(t,n)&&I(e,n,t[n]);return e};function R({className:e,block:t,selectedValue:n,selectValue:i,tabValues:s}){const l=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),c=e=>{const t=e.currentTarget,a=l.indexOf(t),r=s[a].value;r!==n&&(p(t),i(r))},u=e=>{var t,n;let a=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;a=null!=(t=l[n])?t:l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;a=null!=(n=l[t])?n:l[l.length-1];break}}null==a||a.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},e)},s.map((({value:e,label:t,attributes:o})=>{return a.createElement("li",(i=D({role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,key:e,ref:e=>l.push(e),onKeyDown:u,onClick:c},o),s={className:(0,r.Z)("tabs__item",C,null==o?void 0:o.className,{"tabs__item--active":n===e})},j(i,T(s))),null!=t?t:e);var i,s})))}function V({lazy:e,children:t,selectedValue:n}){const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=r.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function q(e){const t=v(e);return a.createElement("div",{className:(0,r.Z)("tabs-container",x)},a.createElement(R,D(D({},e),t)),a.createElement(V,D(D({},e),t)))}function B(e){const t=(0,w.Z)();return a.createElement(q,D({key:String(t)},e))}},6203:function(e,t,n){n.r(t),n.d(t,{assets:function(){return b},contentTitle:function(){return g},default:function(){return N},frontMatter:function(){return m},metadata:function(){return h},toc:function(){return k}});var a=n(3905),r=n(4023),o=n(9247),i=Object.defineProperty,s=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,f=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&f(e,n,t[n]);if(p)for(var n of p(t))u.call(t,n)&&f(e,n,t[n]);return e};const m={id:"test-configuration",title:"Test configuration"},g=void 0,h={unversionedId:"test-configuration",id:"version-stable/test-configuration",title:"Test configuration",description:"Playwright has many options to configure how your tests are run. You can specify these options in the configuration file. Note that test runner options are top-level, do not put them into the use section.",source:"@site/versioned_docs/version-stable/test-configuration.mdx",sourceDirName:".",slug:"/test-configuration",permalink:"/docs/test-configuration",draft:!1,tags:[],version:"stable",frontMatter:{id:"test-configuration",title:"Test configuration"},sidebar:"docs",previous:{title:"Canary releases",permalink:"/docs/canary-releases"},next:{title:"Test use options",permalink:"/docs/test-use-options"}},b={},k=[{value:"Basic Configuration",id:"basic-configuration",level:2},{value:"Filtering Tests",id:"filtering-tests",level:2},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Expect Options",id:"expect-options",level:2},{value:"Add custom matchers using expect.extend",id:"add-custom-matchers-using-expectextend",level:3}],y={toc:k};function N(e){var t,n=e,{components:i}=n,f=((e,t)=>{var n={};for(var a in e)c.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&u.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=d(d({},y),f),s(t,l({components:i,mdxType:"MDXLayout"}))),(0,a.kt)("p",null,"Playwright has many options to configure how your tests are run. You can specify these options in the configuration file. Note that test runner options are ",(0,a.kt)("strong",{parentName:"p"},"top-level"),", do not put them into the ",(0,a.kt)("inlineCode",{parentName:"p"},"use")," section."),(0,a.kt)("h2",d({},{id:"basic-configuration"}),"Basic Configuration"),(0,a.kt)("p",null,"Here are some of the most common configuration options."),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-js"}),"import { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  // Look for test files in the \"tests\" directory, relative to this configuration file.\n  testDir: 'tests',\n\n  // Run all tests in parallel.\n  fullyParallel: true,\n\n  // Fail the build on CI if you accidentally left test.only in the source code.\n  forbidOnly: !!process.env.CI,\n\n  // Retry on CI only.\n  retries: process.env.CI ? 2 : 0,\n\n  // Opt out of parallel tests on CI.\n  workers: process.env.CI ? 1 : undefined,\n\n  // Reporter to use\n  reporter: 'html',\n\n  use: {\n    // Base URL to use in actions like `await page.goto('/')`.\n    baseURL: 'http://127.0.0.1:3000',\n\n    // Collect trace when retrying the failed test.\n    trace: 'on-first-retry',\n  },\n  // Configure projects for major browsers.\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n  ],\n  // Run your local dev server before starting the tests.\n  webServer: {\n    command: 'npm run start',\n    url: 'http://127.0.0.1:3000',\n    reuseExistingServer: !process.env.CI,\n  },\n});\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:"left"}),"Option"),(0,a.kt)("th",d({parentName:"tr"},{align:"left"}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-forbid-only"}),"testConfig.forbidOnly")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Whether to exit with an error if any tests are marked as ",(0,a.kt)("inlineCode",{parentName:"td"},"test.only"),". Useful on CI.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-fully-parallel"}),"testConfig.fullyParallel")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"have all tests in all files to run in parallel. See ",(0,a.kt)("a",d({parentName:"td"},{href:"./test-parallel"}),"/Parallelism and sharding")," for more details.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-projects"}),"testConfig.projects")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Run tests in multiple configurations or on multiple browsers")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-reporter"}),"testConfig.reporter")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Reporter to use. See ",(0,a.kt)("a",d({parentName:"td"},{href:"/docs/test-reporters"}),"Test Reporters")," to learn more about which reporters are available.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-retries"}),"testConfig.retries")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"The maximum number of retry attempts per test. See ",(0,a.kt)("a",d({parentName:"td"},{href:"/docs/test-retries"}),"Test Retries")," to learn more about retries.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-test-dir"}),"testConfig.testDir")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Directory with the test files.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-use"}),"testConfig.use")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Options with ",(0,a.kt)("inlineCode",{parentName:"td"},"use{}"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-web-server"}),"testConfig.webServer")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"To launch a server during the tests, use the ",(0,a.kt)("inlineCode",{parentName:"td"},"webServer")," option")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-workers"}),"testConfig.workers")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"The maximum number of concurrent worker processes to use for parallelizing tests. Can also be set as percentage of logical CPU cores, e.g. ",(0,a.kt)("inlineCode",{parentName:"td"},"'50%'."),". See ",(0,a.kt)("a",d({parentName:"td"},{href:"./test-parallel"}),"/Parallelism and sharding")," for more details.")))),(0,a.kt)("h2",d({},{id:"filtering-tests"}),"Filtering Tests"),(0,a.kt)("p",null,"Filter tests by glob patterns or regular expressions."),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Glob patterns or regular expressions to ignore test files.\n  testIgnore: '*test-assets',\n\n  // Glob patterns or regular expressions that match test files.\n  testMatch: '*todo-tests/*.spec.ts',\n});\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:"left"}),"Option"),(0,a.kt)("th",d({parentName:"tr"},{align:"left"}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-test-ignore"}),"testConfig.testIgnore")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Glob patterns or regular expressions that should be ignored when looking for the test files. For example, ",(0,a.kt)("inlineCode",{parentName:"td"},"'*test-assets'"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-test-match"}),"testConfig.testMatch")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Glob patterns or regular expressions that match test files. For example, ",(0,a.kt)("inlineCode",{parentName:"td"},"'*todo-tests/*.spec.ts'"),". By default, Playwright runs ",(0,a.kt)("code",null,".*(test","|","spec)",".","(js","|","ts","|","mjs)")," files.")))),(0,a.kt)("h2",d({},{id:"advanced-configuration"}),"Advanced Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Folder for test artifacts such as screenshots, videos, traces, etc.\n  outputDir: 'test-results',\n\n  // path to the global setup files.\n  globalSetup: require.resolve('./global-setup'),\n\n  // path to the global teardown files.\n  globalTeardown: require.resolve('./global-teardown'),\n\n  // Each test is given 30 seconds.\n  timeout: 30000,\n\n});\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:"left"}),"Option"),(0,a.kt)("th",d({parentName:"tr"},{align:"left"}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-global-setup"}),"testConfig.globalSetup")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Path to the global setup file. This file will be required and run before all the tests. It must export a single function.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-global-teardown"}),"testConfig.globalTeardown")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Path to the global teardown file. This file will be required and run after all the tests. It must export a single function.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-output-dir"}),"testConfig.outputDir")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Folder for test artifacts such as screenshots, videos, traces, etc.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-timeout"}),"testConfig.timeout")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Playwright enforces a ",(0,a.kt)("a",d({parentName:"td"},{href:"/docs/test-timeouts"}),"timeout")," for each test, 30 seconds by default. Time spent by the test function, fixtures, beforeEach and afterEach hooks is included in the test timeout.")))),(0,a.kt)("h2",d({},{id:"expect-options"}),"Expect Options"),(0,a.kt)("p",null,"Configuration for the expect assertion library."),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  expect: {\n    // Maximum time expect() should wait for the condition to be met.\n    timeout: 5000,\n\n    toHaveScreenshot: {\n      // An acceptable amount of pixels that could be different, unset by default.\n      maxDiffPixels: 10,\n    },\n\n    toMatchSnapshot: {\n      // An acceptable ratio of pixels that are different to the\n      // total amount of pixels, between 0 and 1.\n      maxDiffPixelRatio: 0.1,\n    },\n  },\n\n});\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:"left"}),"Option"),(0,a.kt)("th",d({parentName:"tr"},{align:"left"}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-testconfig#test-config-expect"}),"testConfig.expect")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/test-assertions"}),"Web first assertions")," like ",(0,a.kt)("inlineCode",{parentName:"td"},"expect(locator).toHaveText()")," have a separate timeout of 5 seconds by default. This is the maximum time the ",(0,a.kt)("inlineCode",{parentName:"td"},"expect()")," should wait for the condition to be met. Learn more about ",(0,a.kt)("a",d({parentName:"td"},{href:"/docs/test-timeouts"}),"test and expect timeouts")," and how to set them for a single test.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-pageassertions#page-assertions-to-have-screenshot-1"}),"expect(page).toHaveScreenshot()")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Configuration for the ",(0,a.kt)("inlineCode",{parentName:"td"},"expect(locator).toHaveScreeshot()")," method.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),(0,a.kt)("a",d({parentName:"td"},{href:"/docs/api/class-snapshotassertions#snapshot-assertions-to-match-snapshot-1"}),"expect(value).toMatchSnapshot()")),(0,a.kt)("td",d({parentName:"tr"},{align:"left"}),"Configuration for the ",(0,a.kt)("inlineCode",{parentName:"td"},"expect(locator).toMatchSnapshot()")," method.")))),(0,a.kt)("h3",d({},{id:"add-custom-matchers-using-expectextend"}),"Add custom matchers using expect.extend"),(0,a.kt)("p",null,"You can extend Playwright assertions by providing custom matchers. These matchers will be available on the ",(0,a.kt)("inlineCode",{parentName:"p"},"expect")," object."),(0,a.kt)("p",null,"In this example we add a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"toBeWithinRange")," function in the configuration file. Custom matcher should return a ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," callback and a ",(0,a.kt)("inlineCode",{parentName:"p"},"pass")," flag indicating whether the assertion passed."),(0,a.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { expect, defineConfig } from '@playwright/test';\n\nexpect.extend({\n  toBeWithinRange(received: number, floor: number, ceiling: number) {\n    const pass = received >= floor && received <= ceiling;\n    if (pass) {\n      return {\n        message: () => 'passed',\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => 'failed',\n        pass: false,\n      };\n    }\n  },\n});\n\nexport default defineConfig({});\n"))),(0,a.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"const { expect, defineConfig } = require('@playwright/test');\n\nexpect.extend({\n  toBeWithinRange(received, floor, ceiling) {\n    const pass = received >= floor && received <= ceiling;\n    if (pass) {\n      return {\n        message: () => 'passed',\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => 'failed',\n        pass: false,\n      };\n    }\n  },\n});\n\nmodule.exports = defineConfig({});\n")))),(0,a.kt)("p",null,"Now we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"toBeWithinRange")," in the test."),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="example.spec.ts"',title:'"example.spec.ts"'}),"import { test, expect } from '@playwright/test';\n\ntest('numeric ranges', () => {\n  expect(100).toBeWithinRange(90, 110);\n  expect(101).not.toBeWithinRange(0, 100);\n});\n")),(0,a.kt)("admonition",d({},{type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"Do not confuse Playwright's ",(0,a.kt)("inlineCode",{parentName:"p"},"expect")," with the ",(0,a.kt)("a",d({parentName:"p"},{href:"https://jestjs.io/docs/expect"}),(0,a.kt)("inlineCode",{parentName:"a"},"expect")," library"),". The latter is not fully integrated with Playwright test runner, so make sure to use Playwright's own ",(0,a.kt)("inlineCode",{parentName:"p"},"expect"),".")),(0,a.kt)("p",null,"For TypeScript, also add the following to your ",(0,a.kt)("a",d({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/declaration-files/templates/global-d-ts.html"}),(0,a.kt)("inlineCode",{parentName:"a"},"global.d.ts")),". If it does not exist, you need to create it inside your repository. Make sure that your ",(0,a.kt)("inlineCode",{parentName:"p"},"global.d.ts")," gets included inside your ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," via the ",(0,a.kt)("inlineCode",{parentName:"p"},"files"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"include")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"compilerOptions.typeRoots")," option so that your IDE will pick it up."),(0,a.kt)("p",null,"You don't need it for JavaScript."),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="global.d.ts"',title:'"global.d.ts"'}),"export {};\n\ndeclare global {\n namespace PlaywrightTest {\n    interface Matchers<R, T> {\n      toBeWithinRange(a: number, b: number): R;\n    }\n  }\n}\n")))}N.isMDXComponent=!0}}]);