"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[6299],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,m=c["".concat(o,".").concat(d)]||c[d]||g[d]||s;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3122:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return g},metadata:function(){return m},toc:function(){return f}});var r=n(3905),a=Object.defineProperty,s=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,c=(e,t)=>{for(var n in t||(t={}))o.call(t,n)&&u(e,n,t[n]);if(l)for(var n of l(t))p.call(t,n)&&u(e,n,t[n]);return e};const g={id:"running-tests",title:"Running tests"},d=void 0,m={unversionedId:"running-tests",id:"version-stable/running-tests",title:"Running tests",description:"You can run a single test, a set of tests or all tests. Tests can be run on one browser or multiple browsers. By default tests are run in a headless manner meaning no browser window will be opened while running the tests and results will be seen in the terminal.",source:"@site/versioned_docs/version-stable/running-tests.mdx",sourceDirName:".",slug:"/running-tests",permalink:"/docs/running-tests",draft:!1,tags:[],version:"stable",frontMatter:{id:"running-tests",title:"Running tests"},sidebar:"docs",previous:{title:"Writing tests",permalink:"/docs/writing-tests"},next:{title:"Test generator",permalink:"/docs/codegen-intro"}},h={},f=[{value:"Run tests in UI Mode",id:"run-tests-in-ui-mode",level:2},{value:"Command Line",id:"command-line",level:2},{value:"Debugging Tests",id:"debugging-tests",level:2},{value:"Test Reports",id:"test-reports",level:2},{value:"What&#39;s Next",id:"whats-next",level:2}],b={toc:f};function k(e){var t,n=e,{components:a}=n,u=((e,t)=>{var n={};for(var r in e)o.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&p.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=c(c({},b),u),s(t,i({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"You can run a single test, a set of tests or all tests. Tests can be run on one browser or multiple browsers. By default tests are run in a headless manner meaning no browser window will be opened while running the tests and results will be seen in the terminal."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"You will learn")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",c({parentName:"li"},{href:"/docs/running-tests#command-line"}),"How to run tests from the command line")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",c({parentName:"li"},{href:"/docs/running-tests#debugging-tests"}),"How to debug tests")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",c({parentName:"li"},{href:"/docs/running-tests#test-reports"}),"How to open the HTML test reporter"))),(0,r.kt)("h2",c({},{id:"run-tests-in-ui-mode"}),"Run tests in UI Mode"),(0,r.kt)("p",null,"Run your tests with ",(0,r.kt)("a",c({parentName:"p"},{href:"/docs/test-ui-mode"}),"UI Mode")," for a better developer experience with time travel debugging, watch mode and more."),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"npx playwright test --ui\n")),(0,r.kt)("h2",c({},{id:"command-line"}),"Command Line"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Running all tests"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"npx playwright test\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Running a single test file"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"npx playwright test landing-page.spec.ts\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run a set of test files"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"npx playwright test tests/todo-page/ tests/landing-page/\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run files that have ",(0,r.kt)("inlineCode",{parentName:"p"},"landing")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"login")," in the file name"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"npx playwright test landing login\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run the test with the title"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),'npx playwright test -g "add a todo item"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Running tests in headed mode"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"npx playwright test landing-page.spec.ts --headed\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Running tests on a specific project"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"npx playwright test landing-page.ts --project=chromium\n")))),(0,r.kt)("h2",c({},{id:"debugging-tests"}),"Debugging Tests"),(0,r.kt)("p",null,"Since Playwright runs in Node.js, you can debug it with your debugger of choice e.g. using ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," or inside your IDE or directly in VS Code with the ",(0,r.kt)("a",c({parentName:"p"},{href:"/docs/getting-started-vscode"}),"VS Code Extension"),". Playwright comes with the ",(0,r.kt)("a",c({parentName:"p"},{href:"/docs/debug#playwright-inspector"}),"Playwright Inspector")," which allows you to step through Playwright API calls, see their debug logs and explore ",(0,r.kt)("a",c({parentName:"p"},{href:"/docs/locators"}),"locators"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Debugging all tests:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"npx playwright test --debug\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Debugging one test file:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"npx playwright test example.spec.ts --debug\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Debugging a test from the line number where the ",(0,r.kt)("inlineCode",{parentName:"p"},"test(..")," is defined:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"npx playwright test example.spec.ts:10 --debug\n")))),(0,r.kt)("img",{width:"1340",alt:"Debugging Tests with the Playwright inspector",src:"https://user-images.githubusercontent.com/13063165/212936618-84b87acc-bc2e-46ed-994b-32b2ef742e60.png"}),(0,r.kt)("p",null,"Check out our ",(0,r.kt)("a",c({parentName:"p"},{href:"/docs/debug"}),"debugging guide")," to learn more about the ",(0,r.kt)("a",c({parentName:"p"},{href:"/docs/debug#playwright-inspector"}),"Playwright Inspector")," as well as debugging with ",(0,r.kt)("a",c({parentName:"p"},{href:"/docs/debug#browser-developer-tools"}),"Browser Developer tools"),"."),(0,r.kt)("h2",c({},{id:"test-reports"}),"Test Reports"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",c({parentName:"p"},{href:"/docs/test-reporters#html-reporter"}),"HTML Reporter")," shows you a full report of your tests allowing you to filter the report by browsers, passed tests, failed tests, skipped tests and flaky tests. By default, the HTML report is opened automatically if some of the tests failed."),(0,r.kt)("pre",null,(0,r.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"npx playwright show-report\n")),(0,r.kt)("img",{width:"1424",alt:"HTML Report > Test Reports view",src:"https://user-images.githubusercontent.com/13063165/221930419-49543647-9130-4429-a857-6851c2005e48.png"}),(0,r.kt)("p",null,"You can click on each test and explore the tests errors as well as each step of the test."),(0,r.kt)("img",{width:"1440",alt:"HTML Reporter > Test Reports detailed view",src:"https://user-images.githubusercontent.com/13063165/221930640-c1ccda28-7906-44c7-a198-acd9acb40bbe.png"}),(0,r.kt)("h2",c({},{id:"whats-next"}),"What's Next"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",c({parentName:"li"},{href:"/docs/codegen-intro"}),"Generate tests with Codegen")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",c({parentName:"li"},{href:"/docs/trace-viewer-intro"}),"See a trace of your tests"))))}k.isMDXComponent=!0}}]);