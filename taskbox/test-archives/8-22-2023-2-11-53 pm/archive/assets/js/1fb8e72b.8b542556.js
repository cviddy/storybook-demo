"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[8911],{1748:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"stable","label":"stable","banner":null,"badge":false,"noIndex":false,"className":"docs-version-stable","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Getting Started","items":[{"type":"link","label":"Installation","href":"/docs/intro","docId":"intro"},{"type":"link","label":"Writing tests","href":"/docs/writing-tests","docId":"writing-tests"},{"type":"link","label":"Running tests","href":"/docs/running-tests","docId":"running-tests"},{"type":"link","label":"Test generator","href":"/docs/codegen-intro","docId":"codegen-intro"},{"type":"link","label":"Trace viewer","href":"/docs/trace-viewer-intro","docId":"trace-viewer-intro"},{"type":"link","label":"UI Mode","href":"/docs/test-ui-mode","docId":"test-ui-mode"},{"type":"link","label":"CI GitHub Actions","href":"/docs/ci-intro","docId":"ci-intro"}],"collapsed":false,"collapsible":true},{"type":"link","label":"Getting started - VS Code","href":"/docs/getting-started-vscode","docId":"getting-started-vscode"},{"type":"link","label":"Release notes","href":"/docs/release-notes","docId":"release-notes"},{"type":"link","label":"Canary releases","href":"/docs/canary-releases","docId":"canary-releases"},{"type":"category","label":"Playwright Test","items":[{"type":"link","label":"Test configuration","href":"/docs/test-configuration","docId":"test-configuration"},{"type":"link","label":"Test use options","href":"/docs/test-use-options","docId":"test-use-options"},{"type":"link","label":"Annotations","href":"/docs/test-annotations","docId":"test-annotations"},{"type":"link","label":"Command line","href":"/docs/test-cli","docId":"test-cli"},{"type":"link","label":"Emulation","href":"/docs/emulation","docId":"emulation"},{"type":"link","label":"Fixtures","href":"/docs/test-fixtures","docId":"test-fixtures"},{"type":"link","label":"Global setup and teardown","href":"/docs/test-global-setup-teardown","docId":"test-global-setup-teardown"},{"type":"link","label":"Parallelism","href":"/docs/test-parallel","docId":"test-parallel"},{"type":"link","label":"Parameterize tests","href":"/docs/test-parameterize","docId":"test-parameterize"},{"type":"link","label":"Projects","href":"/docs/test-projects","docId":"test-projects"},{"type":"link","label":"Reporters","href":"/docs/test-reporters","docId":"test-reporters"},{"type":"link","label":"Retries","href":"/docs/test-retries","docId":"test-retries"},{"type":"link","label":"Sharding","href":"/docs/test-sharding","docId":"test-sharding"},{"type":"link","label":"Timeouts","href":"/docs/test-timeouts","docId":"test-timeouts"},{"type":"link","label":"TypeScript","href":"/docs/test-typescript","docId":"test-typescript"},{"type":"link","label":"UI Mode","href":"/docs/test-ui-mode","docId":"test-ui-mode"},{"type":"link","label":"Web server","href":"/docs/test-webserver","docId":"test-webserver"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Guides","items":[{"type":"link","label":"Library","href":"/docs/library","docId":"library"},{"type":"link","label":"Accessibility testing","href":"/docs/accessibility-testing","docId":"accessibility-testing"},{"type":"link","label":"Actions","href":"/docs/input","docId":"input"},{"type":"link","label":"Assertions","href":"/docs/test-assertions","docId":"test-assertions"},{"type":"link","label":"API testing","href":"/docs/api-testing","docId":"api-testing"},{"type":"link","label":"Authentication","href":"/docs/auth","docId":"auth"},{"type":"link","label":"Auto-waiting","href":"/docs/actionability","docId":"actionability"},{"type":"link","label":"Best Practices","href":"/docs/best-practices","docId":"best-practices"},{"type":"link","label":"Browsers","href":"/docs/browsers","docId":"browsers"},{"type":"link","label":"Chrome extensions","href":"/docs/chrome-extensions","docId":"chrome-extensions"},{"type":"link","label":"Experimental: components","href":"/docs/test-components","docId":"test-components"},{"type":"link","label":"Debugging Tests","href":"/docs/debug","docId":"debug"},{"type":"link","label":"Dialogs","href":"/docs/dialogs","docId":"dialogs"},{"type":"link","label":"Downloads","href":"/docs/downloads","docId":"downloads"},{"type":"link","label":"Evaluating JavaScript","href":"/docs/evaluating","docId":"evaluating"},{"type":"link","label":"Events","href":"/docs/events","docId":"events"},{"type":"link","label":"Extensibility","href":"/docs/extensibility","docId":"extensibility"},{"type":"link","label":"Frames","href":"/docs/frames","docId":"frames"},{"type":"link","label":"Handles","href":"/docs/handles","docId":"handles"},{"type":"link","label":"Isolation","href":"/docs/browser-contexts","docId":"browser-contexts"},{"type":"link","label":"Locators","href":"/docs/locators","docId":"locators"},{"type":"link","label":"Mock APIs","href":"/docs/mock","docId":"mock"},{"type":"link","label":"Mock browser APIs","href":"/docs/mock-browser-apis","docId":"mock-browser-apis"},{"type":"link","label":"Navigations","href":"/docs/navigations","docId":"navigations"},{"type":"link","label":"Network","href":"/docs/network","docId":"network"},{"type":"link","label":"Other locators","href":"/docs/other-locators","docId":"other-locators"},{"type":"link","label":"Page object models","href":"/docs/pom","docId":"pom"},{"type":"link","label":"Pages","href":"/docs/pages","docId":"pages"},{"type":"link","label":"Screenshots","href":"/docs/screenshots","docId":"screenshots"},{"type":"link","label":"Visual comparisons","href":"/docs/test-snapshots","docId":"test-snapshots"},{"type":"link","label":"Test generator","href":"/docs/codegen","docId":"codegen"},{"type":"link","label":"Trace viewer","href":"/docs/trace-viewer","docId":"trace-viewer"},{"type":"link","label":"Videos","href":"/docs/videos","docId":"videos"},{"type":"link","label":"WebView2","href":"/docs/webview2","docId":"webview2"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Migration","items":[{"type":"link","label":"Migrating from Protractor","href":"/docs/protractor","docId":"protractor"},{"type":"link","label":"Migrating from Puppeteer","href":"/docs/puppeteer","docId":"puppeteer"},{"type":"link","label":"Migrating from Testing Library","href":"/docs/testing-library","docId":"testing-library"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Integrations","items":[{"type":"link","label":"Docker","href":"/docs/docker","docId":"docker"},{"type":"link","label":"Continuous Integration","href":"/docs/ci","docId":"ci"},{"type":"link","label":"Selenium Grid","href":"/docs/selenium-grid","docId":"selenium-grid"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Supported languages","href":"/docs/languages","docId":"languages"}],"api":[{"type":"category","label":"API reference","items":[{"type":"link","label":"Playwright Test","href":"/docs/api/class-test","docId":"api/class-test"},{"type":"link","label":"Playwright Library","href":"/docs/api/class-playwright","docId":"api/class-playwright"},{"type":"category","label":"Classes","items":[{"type":"link","label":"APIRequest","href":"/docs/api/class-apirequest","docId":"api/class-apirequest"},{"type":"link","label":"APIRequestContext","href":"/docs/api/class-apirequestcontext","docId":"api/class-apirequestcontext"},{"type":"link","label":"APIResponse","href":"/docs/api/class-apiresponse","docId":"api/class-apiresponse"},{"type":"link","label":"Accessibility","href":"/docs/api/class-accessibility","docId":"api/class-accessibility"},{"type":"link","label":"Browser","href":"/docs/api/class-browser","docId":"api/class-browser"},{"type":"link","label":"BrowserContext","href":"/docs/api/class-browsercontext","docId":"api/class-browsercontext"},{"type":"link","label":"BrowserServer","href":"/docs/api/class-browserserver","docId":"api/class-browserserver"},{"type":"link","label":"BrowserType","href":"/docs/api/class-browsertype","docId":"api/class-browsertype"},{"type":"link","label":"CDPSession","href":"/docs/api/class-cdpsession","docId":"api/class-cdpsession"},{"type":"link","label":"ConsoleMessage","href":"/docs/api/class-consolemessage","docId":"api/class-consolemessage"},{"type":"link","label":"Coverage","href":"/docs/api/class-coverage","docId":"api/class-coverage"},{"type":"link","label":"Dialog","href":"/docs/api/class-dialog","docId":"api/class-dialog"},{"type":"link","label":"Download","href":"/docs/api/class-download","docId":"api/class-download"},{"type":"link","label":"ElementHandle","href":"/docs/api/class-elementhandle","docId":"api/class-elementhandle"},{"type":"link","label":"FileChooser","href":"/docs/api/class-filechooser","docId":"api/class-filechooser"},{"type":"link","label":"Frame","href":"/docs/api/class-frame","docId":"api/class-frame"},{"type":"link","label":"FrameLocator","href":"/docs/api/class-framelocator","docId":"api/class-framelocator"},{"type":"link","label":"JSHandle","href":"/docs/api/class-jshandle","docId":"api/class-jshandle"},{"type":"link","label":"Keyboard","href":"/docs/api/class-keyboard","docId":"api/class-keyboard"},{"type":"link","label":"Locator","href":"/docs/api/class-locator","docId":"api/class-locator"},{"type":"link","label":"Logger","href":"/docs/api/class-logger","docId":"api/class-logger"},{"type":"link","label":"Mouse","href":"/docs/api/class-mouse","docId":"api/class-mouse"},{"type":"link","label":"Page","href":"/docs/api/class-page","docId":"api/class-page"},{"type":"link","label":"Request","href":"/docs/api/class-request","docId":"api/class-request"},{"type":"link","label":"Response","href":"/docs/api/class-response","docId":"api/class-response"},{"type":"link","label":"Route","href":"/docs/api/class-route","docId":"api/class-route"},{"type":"link","label":"Selectors","href":"/docs/api/class-selectors","docId":"api/class-selectors"},{"type":"link","label":"TimeoutError","href":"/docs/api/class-timeouterror","docId":"api/class-timeouterror"},{"type":"link","label":"Touchscreen","href":"/docs/api/class-touchscreen","docId":"api/class-touchscreen"},{"type":"link","label":"Tracing","href":"/docs/api/class-tracing","docId":"api/class-tracing"},{"type":"link","label":"Video","href":"/docs/api/class-video","docId":"api/class-video"},{"type":"link","label":"WebSocket","href":"/docs/api/class-websocket","docId":"api/class-websocket"},{"type":"link","label":"Worker","href":"/docs/api/class-worker","docId":"api/class-worker"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Assertions","items":[{"type":"link","label":"APIResponseAssertions","href":"/docs/api/class-apiresponseassertions","docId":"api/class-apiresponseassertions"},{"type":"link","label":"GenericAssertions","href":"/docs/api/class-genericassertions","docId":"api/class-genericassertions"},{"type":"link","label":"LocatorAssertions","href":"/docs/api/class-locatorassertions","docId":"api/class-locatorassertions"},{"type":"link","label":"PageAssertions","href":"/docs/api/class-pageassertions","docId":"api/class-pageassertions"},{"type":"link","label":"SnapshotAssertions","href":"/docs/api/class-snapshotassertions","docId":"api/class-snapshotassertions"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Test Runner","items":[{"type":"link","label":"Fixtures","href":"/docs/api/class-fixtures","docId":"api/class-fixtures"},{"type":"link","label":"Playwright Test","href":"/docs/api/class-test","docId":"api/class-test"},{"type":"link","label":"TestConfig","href":"/docs/api/class-testconfig","docId":"api/class-testconfig"},{"type":"link","label":"TestInfo","href":"/docs/api/class-testinfo","docId":"api/class-testinfo"},{"type":"link","label":"TestInfoError","href":"/docs/api/class-testinfoerror","docId":"api/class-testinfoerror"},{"type":"link","label":"TestOptions","href":"/docs/api/class-testoptions","docId":"api/class-testoptions"},{"type":"link","label":"TestProject","href":"/docs/api/class-testproject","docId":"api/class-testproject"},{"type":"link","label":"WorkerInfo","href":"/docs/api/class-workerinfo","docId":"api/class-workerinfo"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Test Reporter","items":[{"type":"link","label":"Location","href":"/docs/api/class-location","docId":"api/class-location"},{"type":"link","label":"Reporter","href":"/docs/api/class-reporter","docId":"api/class-reporter"},{"type":"link","label":"Suite","href":"/docs/api/class-suite","docId":"api/class-suite"},{"type":"link","label":"TestCase","href":"/docs/api/class-testcase","docId":"api/class-testcase"},{"type":"link","label":"TestError","href":"/docs/api/class-testerror","docId":"api/class-testerror"},{"type":"link","label":"TestResult","href":"/docs/api/class-testresult","docId":"api/class-testresult"},{"type":"link","label":"TestStep","href":"/docs/api/class-teststep","docId":"api/class-teststep"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Experimental","items":[{"type":"link","label":"Android","href":"/docs/api/class-android","docId":"api/class-android"},{"type":"link","label":"AndroidDevice","href":"/docs/api/class-androiddevice","docId":"api/class-androiddevice"},{"type":"link","label":"AndroidInput","href":"/docs/api/class-androidinput","docId":"api/class-androidinput"},{"type":"link","label":"AndroidSocket","href":"/docs/api/class-androidsocket","docId":"api/class-androidsocket"},{"type":"link","label":"AndroidWebView","href":"/docs/api/class-androidwebview","docId":"api/class-androidwebview"},{"type":"link","label":"Electron","href":"/docs/api/class-electron","docId":"api/class-electron"},{"type":"link","label":"ElectronApplication","href":"/docs/api/class-electronapplication","docId":"api/class-electronapplication"}],"collapsed":false,"collapsible":true}],"collapsed":false,"collapsible":true}]},"docs":{"accessibility-testing":{"id":"accessibility-testing","title":"Accessibility testing","description":"Playwright can be used to test your application for many types of accessibility issues.","sidebar":"docs"},"actionability":{"id":"actionability","title":"Auto-waiting","description":"Playwright performs a range of actionability checks on the elements before making actions to ensure these actions behave as expected. It auto-waits for all the relevant checks to pass and only then performs the requested action. If the required checks do not pass within the given timeout, action fails with the TimeoutError.","sidebar":"docs"},"api-testing":{"id":"api-testing","title":"API testing","description":"Playwright can be used to get access to the REST API of your application.","sidebar":"docs"},"api/class-accessibility":{"id":"api/class-accessibility","title":"Accessibility","description":"The Accessibility class provides methods for inspecting Chromium\'s accessibility tree. The accessibility tree is used by assistive technology such as screen readers or switches.","sidebar":"api"},"api/class-android":{"id":"api/class-android","title":"Android","description":"Playwright has experimental support for Android automation. This includes Chrome for Android and Android WebView.","sidebar":"api"},"api/class-androiddevice":{"id":"api/class-androiddevice","title":"AndroidDevice","description":"AndroidDevice] represents a connected device, either real hardware or emulated. Devices can be obtained using [android.devices().","sidebar":"api"},"api/class-androidinput":{"id":"api/class-androidinput","title":"AndroidInput","description":"---","sidebar":"api"},"api/class-androidsocket":{"id":"api/class-androidsocket","title":"AndroidSocket","description":"AndroidSocket] is a way to communicate with a process launched on the [AndroidDevice]. Use [androidDevice.open() to open a socket.","sidebar":"api"},"api/class-androidwebview":{"id":"api/class-androidwebview","title":"AndroidWebView","description":"AndroidWebView] represents a WebView open on the [AndroidDevice]. WebView is usually obtained using [androidDevice.webView().","sidebar":"api"},"api/class-apirequest":{"id":"api/class-apirequest","title":"APIRequest","description":"Exposes API that can be used for the Web API testing. This class is used for creating APIRequestContext] instance which in turn can be used for sending web requests. An instance of this class can be obtained via [playwright.request. For more information see [APIRequestContext].","sidebar":"api"},"api/class-apirequestcontext":{"id":"api/class-apirequestcontext","title":"APIRequestContext","description":"This API is used for the Web API testing. You can use it to trigger API endpoints, configure micro-services, prepare environment or the service to your e2e test.","sidebar":"api"},"api/class-apiresponse":{"id":"api/class-apiresponse","title":"APIResponse","description":"APIResponse] class represents responses returned by [apiRequestContext.get() and similar methods.","sidebar":"api"},"api/class-apiresponseassertions":{"id":"api/class-apiresponseassertions","title":"APIResponseAssertions","description":"The [APIResponseAssertions] class provides assertion methods that can be used to make assertions about the [APIResponse] in the tests.","sidebar":"api"},"api/class-browser":{"id":"api/class-browser","title":"Browser","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-browsercontext":{"id":"api/class-browsercontext","title":"BrowserContext","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-browserserver":{"id":"api/class-browserserver","title":"BrowserServer","description":"---","sidebar":"api"},"api/class-browsertype":{"id":"api/class-browsertype","title":"BrowserType","description":"BrowserType provides methods to launch a specific browser instance or connect to an existing one. The following is a typical example of using Playwright to drive automation:","sidebar":"api"},"api/class-cdpsession":{"id":"api/class-cdpsession","title":"CDPSession","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-consolemessage":{"id":"api/class-consolemessage","title":"ConsoleMessage","description":"ConsoleMessage] objects are dispatched by page via the [page.on(\'console\') event. For each console messages logged in the page there will be corresponding event in the Playwright context.","sidebar":"api"},"api/class-coverage":{"id":"api/class-coverage","title":"Coverage","description":"Coverage gathers information about parts of JavaScript and CSS that were used by the page.","sidebar":"api"},"api/class-dialog":{"id":"api/class-dialog","title":"Dialog","description":"Dialog] objects are dispatched by page via the [page.on(\'dialog\') event.","sidebar":"api"},"api/class-download":{"id":"api/class-download","title":"Download","description":"Download] objects are dispatched by page via the [page.on(\'download\') event.","sidebar":"api"},"api/class-electron":{"id":"api/class-electron","title":"Electron","description":"Playwright has experimental support for Electron automation. You can access electron namespace via:","sidebar":"api"},"api/class-electronapplication":{"id":"api/class-electronapplication","title":"ElectronApplication","description":"Electron application representation. You can use electron.launch() to obtain the application instance. This instance you can control main electron process as well as work with Electron windows:","sidebar":"api"},"api/class-elementhandle":{"id":"api/class-elementhandle","title":"ElementHandle","description":"* extends: [JSHandle]","sidebar":"api"},"api/class-filechooser":{"id":"api/class-filechooser","title":"FileChooser","description":"FileChooser] objects are dispatched by the page in the [page.on(\'filechooser\') event.","sidebar":"api"},"api/class-fixtures":{"id":"api/class-fixtures","title":"Fixtures","description":"Playwright Test is based on the concept of the test fixtures. Test fixtures are used to establish environment for each test, giving the test everything it needs and nothing else.","sidebar":"api"},"api/class-frame":{"id":"api/class-frame","title":"Frame","description":"At every point of time, page exposes its current frame tree via the page.mainFrame() and frame.childFrames() methods.","sidebar":"api"},"api/class-framelocator":{"id":"api/class-framelocator","title":"FrameLocator","description":"FrameLocator represents a view to the iframe on the page. It captures the logic sufficient to retrieve the iframe and locate elements in that iframe. FrameLocator can be created with either page.frameLocator() or locator.frameLocator() method.","sidebar":"api"},"api/class-genericassertions":{"id":"api/class-genericassertions","title":"GenericAssertions","description":"The GenericAssertions] class provides assertion methods that can be used to make assertions about any values in the tests. A new instance of [GenericAssertions] is created by calling [expect():","sidebar":"api"},"api/class-jshandle":{"id":"api/class-jshandle","title":"JSHandle","description":"JSHandle represents an in-page JavaScript object. JSHandles can be created with the page.evaluateHandle() method.","sidebar":"api"},"api/class-keyboard":{"id":"api/class-keyboard","title":"Keyboard","description":"Keyboard provides an api for managing a virtual keyboard. The high level api is keyboard.type(), which takes raw characters and generates proper keydown, keypress/input, and keyup events on your page.","sidebar":"api"},"api/class-location":{"id":"api/class-location","title":"Location","description":"Represents a location in the source code where [TestCase] or [Suite] is defined.","sidebar":"api"},"api/class-locator":{"id":"api/class-locator","title":"Locator","description":"Locators are the central piece of Playwright\'s auto-waiting and retry-ability. In a nutshell, locators represent a way to find element(s) on the page at any moment. A locator can be created with the page.locator() method.","sidebar":"api"},"api/class-locatorassertions":{"id":"api/class-locatorassertions","title":"LocatorAssertions","description":"The [LocatorAssertions] class provides assertion methods that can be used to make assertions about the [Locator] state in the tests.","sidebar":"api"},"api/class-logger":{"id":"api/class-logger","title":"Logger","description":"Playwright generates a lot of logs and they are accessible via the pluggable logger sink.","sidebar":"api"},"api/class-mouse":{"id":"api/class-mouse","title":"Mouse","description":"The Mouse class operates in main-frame CSS pixels relative to the top-left corner of the viewport.","sidebar":"api"},"api/class-page":{"id":"api/class-page","title":"Page","description":"* extends: [EventEmitter]","sidebar":"api"},"api/class-pageassertions":{"id":"api/class-pageassertions","title":"PageAssertions","description":"The [PageAssertions] class provides assertion methods that can be used to make assertions about the [Page] state in the tests.","sidebar":"api"},"api/class-playwright":{"id":"api/class-playwright","title":"Playwright Library","description":"Playwright module provides a method to launch a browser instance. The following is a typical example of using Playwright to drive automation:","sidebar":"api"},"api/class-playwrightassertions":{"id":"api/class-playwrightassertions","title":"PlaywrightAssertions","description":"Playwright gives you Web-First Assertions with convenience methods for creating assertions that will wait and retry until the expected condition is met."},"api/class-reporter":{"id":"api/class-reporter","title":"Reporter","description":"Test runner notifies the reporter about various events during test execution. All methods of the reporter are optional.","sidebar":"api"},"api/class-request":{"id":"api/class-request","title":"Request","description":"Whenever the page sends a request for a network resource the following sequence of events are emitted by [Page]:","sidebar":"api"},"api/class-response":{"id":"api/class-response","title":"Response","description":"[Response] class represents responses which are received by page.","sidebar":"api"},"api/class-route":{"id":"api/class-route","title":"Route","description":"Whenever a network route is set up with page.route() or browserContext.route(), the Route object allows to handle the route.","sidebar":"api"},"api/class-selectors":{"id":"api/class-selectors","title":"Selectors","description":"Selectors can be used to install custom selector engines. See extensibility for more information.","sidebar":"api"},"api/class-snapshotassertions":{"id":"api/class-snapshotassertions","title":"SnapshotAssertions","description":"Playwright provides methods for comparing page and element screenshots with expected values stored in files.","sidebar":"api"},"api/class-suite":{"id":"api/class-suite","title":"Suite","description":"Suite is a group of tests. All tests in Playwright Test form the following hierarchy:","sidebar":"api"},"api/class-test":{"id":"api/class-test","title":"Playwright Test","description":"Playwright Test provides a test function to declare tests and expect function to write assertions.","sidebar":"api"},"api/class-testcase":{"id":"api/class-testcase","title":"TestCase","description":"TestCase corresponds to every test() call in a test file. When a single test() is running in multiple projects or repeated multiple times, it will have multiple TestCase objects in corresponding projects\' suites.","sidebar":"api"},"api/class-testconfig":{"id":"api/class-testconfig","title":"TestConfig","description":"Playwright Test provides many options to configure how your tests are collected and executed, for example timeout or testDir. These options are described in the TestConfig] object in the [configuration file.","sidebar":"api"},"api/class-testerror":{"id":"api/class-testerror","title":"TestError","description":"Information about an error thrown during test execution.","sidebar":"api"},"api/class-testinfo":{"id":"api/class-testinfo","title":"TestInfo","description":"TestInfo contains information about currently running test. It is available to test functions, test.beforeEach(), test.afterEach(), test.beforeAll() and test.afterAll() hooks, and test-scoped fixtures. TestInfo provides utilities to control test execution: attach files, update test timeout, determine which test is currently running and whether it was retried, etc.","sidebar":"api"},"api/class-testinfoerror":{"id":"api/class-testinfoerror","title":"TestInfoError","description":"Information about an error thrown during test execution.","sidebar":"api"},"api/class-testoptions":{"id":"api/class-testoptions","title":"TestOptions","description":"Playwright Test provides many options to configure test environment, [Browser], [BrowserContext] and more.","sidebar":"api"},"api/class-testproject":{"id":"api/class-testproject","title":"TestProject","description":"Playwright Test supports running multiple test projects at the same time. This is useful for running tests in multiple configurations. For example, consider running tests against multiple browsers.","sidebar":"api"},"api/class-testresult":{"id":"api/class-testresult","title":"TestResult","description":"A result of a single [TestCase] run.","sidebar":"api"},"api/class-teststep":{"id":"api/class-teststep","title":"TestStep","description":"Represents a step in the [TestRun].","sidebar":"api"},"api/class-timeouterror":{"id":"api/class-timeouterror","title":"TimeoutError","description":"* extends: [Error]","sidebar":"api"},"api/class-touchscreen":{"id":"api/class-touchscreen","title":"Touchscreen","description":"The Touchscreen class operates in main-frame CSS pixels relative to the top-left corner of the viewport. Methods on the touchscreen can only be used in browser contexts that have been initialized with hasTouch set to true.","sidebar":"api"},"api/class-tracing":{"id":"api/class-tracing","title":"Tracing","description":"API for collecting and saving Playwright traces. Playwright traces can be opened in Trace Viewer after Playwright script runs.","sidebar":"api"},"api/class-video":{"id":"api/class-video","title":"Video","description":"When browser context is created with the recordVideo option, each page has a video object associated with it.","sidebar":"api"},"api/class-websocket":{"id":"api/class-websocket","title":"WebSocket","description":"The [WebSocket] class represents websocket connections in the page.","sidebar":"api"},"api/class-worker":{"id":"api/class-worker","title":"Worker","description":"The Worker class represents a WebWorker. worker event is emitted on the page object to signal a worker creation. close event is emitted on the worker object when the worker is gone.","sidebar":"api"},"api/class-workerinfo":{"id":"api/class-workerinfo","title":"WorkerInfo","description":"WorkerInfo contains information about the worker that is running tests and is available to worker-scoped fixtures. WorkerInfo is a subset of [TestInfo] that is available in many other places.","sidebar":"api"},"auth":{"id":"auth","title":"Authentication","description":"Playwright executes tests in isolated environments called browser contexts. This isolation model improves reproducibility and prevents cascading test failures. Tests can load existing authenticated state. This eliminates the need to authenticate in every test and speeds up test execution.","sidebar":"docs"},"best-practices":{"id":"best-practices","title":"Best Practices","description":"This guide should help you to make sure you are following our best practices and writing tests that are more resilient.","sidebar":"docs"},"browser-contexts":{"id":"browser-contexts","title":"Isolation","description":"Tests written with Playwright execute in isolated clean-slate environments called browser contexts. This isolation model improves reproducibility and prevents cascading test failures.","sidebar":"docs"},"browsers":{"id":"browsers","title":"Browsers","description":"Each version of Playwright needs specific versions of browser binaries to operate. You will need to use the Playwright CLI to install these browsers.","sidebar":"docs"},"canary-releases":{"id":"canary-releases","title":"Canary releases","description":"Playwright for Node.js has a canary releases system.","sidebar":"docs"},"chrome-extensions":{"id":"chrome-extensions","title":"Chrome extensions","description":"Extensions only work in Chrome / Chromium launched with a persistent context.","sidebar":"docs"},"ci":{"id":"ci","title":"Continuous Integration","description":"Playwright tests can be executed in CI environments. We have created sample configurations for common CI providers.","sidebar":"docs"},"ci-intro":{"id":"ci-intro","title":"CI GitHub Actions","description":"When installing Playwright you are given the option to add a GitHub Actions. This creates a playwright.yml file inside a .github/workflows folder containing everything you need so that your tests run on each push and pull request into the main/master branch.","sidebar":"docs"},"codegen":{"id":"codegen","title":"Test generator","description":"Playwright comes with the ability to generate tests for you as you perform actions in the browser and is a great way to quickly get started with testing. Playwright will look at your page and figure out the best locator, prioritizing role, text and test id locators. If the generator finds multiple elements matching the locator, it will improve the locator to make it resilient that uniquely identify the target element.","sidebar":"docs"},"codegen-intro":{"id":"codegen-intro","title":"Test generator","description":"Playwright comes with the ability to generate tests out of the box and is a great way to quickly get started with testing. It will open two windows, a browser window where you interact with the website you wish to test and the Playwright Inspector window where you can record your tests, copy the tests, clear your tests as well as change the language of your tests.","sidebar":"docs"},"debug":{"id":"debug","title":"Debugging Tests","description":"VS Code debugger","sidebar":"docs"},"dialogs":{"id":"dialogs","title":"Dialogs","description":"Playwright can interact with the web page dialogs such as alert, confirm, prompt as well as beforeunload confirmation.","sidebar":"docs"},"docker":{"id":"docker","title":"Docker","description":"[Dockerfile.jammy] can be used to run Playwright scripts in Docker environment. These image includes all the dependencies needed to run browsers in a Docker container, and also include the browsers themselves.","sidebar":"docs"},"downloads":{"id":"downloads","title":"Downloads","description":"For every attachment downloaded by the page, page.on(\'download\') event is emitted. All these attachments are downloaded into a temporary folder. You can obtain the download url, file system path and payload stream using the [Download] object from the event.","sidebar":"docs"},"emulation":{"id":"emulation","title":"Emulation","description":"With Playwright you can test your app on any browser as well as emulate a real device such as a mobile phone or tablet. Simply configure the devices you would like to emulate and Playwright will simulate the browser behavior such as \\"userAgent\\", \\"screenSize\\", \\"viewport\\" and if it \\"hasTouch\\" enabled. You can also emulate the \\"geolocation\\", \\"locale\\" and \\"timezone\\" for all tests or for a specific test as well as set the \\"permissions\\" to show notifications or change the \\"colorScheme\\".","sidebar":"docs"},"evaluating":{"id":"evaluating","title":"Evaluating JavaScript","description":"Playwright scripts run in your Playwright environment. Your page scripts run in the browser page environment. Those environments don\'t intersect, they are running in different virtual machines in different processes and even potentially on different computers.","sidebar":"docs"},"events":{"id":"events","title":"Events","description":"Playwright allows listening to various types of events happening on the web page, such as network requests, creation of child pages, dedicated workers etc. There are several ways to subscribe to such events such as waiting for events or adding or removing event listeners.","sidebar":"docs"},"extensibility":{"id":"extensibility","title":"Extensibility","description":"- Custom selector engines","sidebar":"docs"},"frames":{"id":"frames","title":"Frames","description":"A [Page] can have one or more [Frame] objects attached to it. Each page has a main frame and page-level interactions (like click) are assumed to operate in the main frame.","sidebar":"docs"},"getting-started-vscode":{"id":"getting-started-vscode","title":"Getting started - VS Code","description":"Playwright Test was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari.","sidebar":"docs"},"handles":{"id":"handles","title":"Handles","description":"Playwright can create handles to the page DOM elements or any other objects inside the page. These handles live in the Playwright process, whereas the actual objects live in the browser. There are two types of handles:","sidebar":"docs"},"input":{"id":"input","title":"Actions","description":"Playwright can interact with HTML Input elements such as text inputs, checkboxes, radio buttons, select options, mouse clicks, type characters, keys and shortcuts as well as upload files and focus elements.","sidebar":"docs"},"intro":{"id":"intro","title":"Installation","description":"Playwright Test was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari.","sidebar":"docs"},"languages":{"id":"languages","title":"Supported languages","description":"Playwright is available in multiple languages that share the same underlying implementation. All core features for automating the browser are supported in all languages, while testing ecosystem integration is different. Pick the language based on your experience, familiarity with its testing ecosystem and your project constraints. For the best experience pick the test runner that we recommend for each language.","sidebar":"docs"},"library":{"id":"library","title":"Library","description":"Playwright Library provides unified APIs for launching and interacting with browsers, while Playwright Test provides all this plus a fully managed end-to-end Test Runner and experience.","sidebar":"docs"},"locators":{"id":"locators","title":"Locators","description":"[Locator]s are the central piece of Playwright\'s auto-waiting and retry-ability. In a nutshell, locators represent a way to find element(s) on the page at any moment.","sidebar":"docs"},"mock":{"id":"mock","title":"Mock APIs","description":"Introduction","sidebar":"docs"},"mock-browser-apis":{"id":"mock-browser-apis","title":"Mock browser APIs","description":"Playwright provides native support for most of the browser features. However, there are some experimental APIs and APIs which are not (yet) fully supported by all browsers. Playwright usually doesn\'t provide dedicated automation APIs in such cases. You can use mocks to test the behavior of your application in such cases. This guide gives a few examples.","sidebar":"docs"},"navigations":{"id":"navigations","title":"Navigations","description":"Playwright can navigate to URLs and handle navigations caused by the page interactions.","sidebar":"docs"},"network":{"id":"network","title":"Network","description":"Introduction","sidebar":"docs"},"other-locators":{"id":"other-locators","title":"Other locators","description":"Check out the main locators guide for most common and recommended locators.","sidebar":"docs"},"pages":{"id":"pages","title":"Pages","description":"- Pages","sidebar":"docs"},"pom":{"id":"pom","title":"Page object models","description":"Large test suites can be structured to optimize ease of authoring and maintenance. Page object models are one such approach to structure your test suite.","sidebar":"docs"},"protractor":{"id":"protractor","title":"Migrating from Protractor","description":"- Migration Principles","sidebar":"docs"},"puppeteer":{"id":"puppeteer","title":"Migrating from Puppeteer","description":"- Migration Principles","sidebar":"docs"},"release-notes":{"id":"release-notes","title":"Release notes","description":"Version 1.37","sidebar":"docs"},"running-tests":{"id":"running-tests","title":"Running tests","description":"You can run a single test, a set of tests or all tests. Tests can be run on one browser or multiple browsers. By default tests are run in a headless manner meaning no browser window will be opened while running the tests and results will be seen in the terminal.","sidebar":"docs"},"screenshots":{"id":"screenshots","title":"Screenshots","description":"Here is a quick way to capture a screenshot and save it into a file:","sidebar":"docs"},"selenium-grid":{"id":"selenium-grid","title":"Selenium Grid","description":"Playwright can connect to Selenium Grid Hub that runs Selenium 4 to launch Google Chrome or Microsoft Edge browser, instead of running browser on the local machine.","sidebar":"docs"},"service-workers-experimental":{"id":"service-workers-experimental","title":"(Experimental) Service Worker Network Events","description":"If you\'re looking to do general network mocking, routing, and interception, please see the Network Guide first. Playwright provides built-in APIs for this use case that don\'t require the information below. However, if you\'re interested in requests made by Service Workers themselves, please read below."},"test-annotations":{"id":"test-annotations","title":"Annotations","description":"Playwright Test supports test annotations to deal with failures, flakiness, skip, focus and tag tests:","sidebar":"docs"},"test-assertions":{"id":"test-assertions","title":"Assertions","description":"Playwright includes test assertions in the form of expect function. To make an assertion, call expect(value) and choose a matcher that reflects the expectation. There are many generic matchers like toEqual, toContain, toBeTruthy that can be used to assert any conditions.","sidebar":"docs"},"test-cli":{"id":"test-cli","title":"Command line","description":"Here are the most common options available in the command line.","sidebar":"docs"},"test-components":{"id":"test-components","title":"Experimental: components","description":"Playwright Test can now test your components.","sidebar":"docs"},"test-configuration":{"id":"test-configuration","title":"Test configuration","description":"Playwright has many options to configure how your tests are run. You can specify these options in the configuration file. Note that test runner options are top-level, do not put them into the use section.","sidebar":"docs"},"test-fixtures":{"id":"test-fixtures","title":"Fixtures","description":"Playwright Test is based on the concept of test fixtures. Test fixtures are used to establish environment for each test, giving the test everything it needs and nothing else. Test fixtures are isolated between tests. With fixtures, you can group tests based on their meaning, instead of their common setup.","sidebar":"docs"},"test-global-setup-teardown":{"id":"test-global-setup-teardown","title":"Global setup and teardown","description":"There are two ways to configure global setup and teardown: using a global setup file and setting it in the config under globalSetup or using project dependencies. With project dependencies, you define a project that runs before all other projects. This is the recommended way to configure global setup as with Project dependencies your HTML report will show the global setup, trace viewer will record a trace of the setup and fixtures can be used.","sidebar":"docs"},"test-parallel":{"id":"test-parallel","title":"Parallelism","description":"Playwright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the same time. By default, test files are run in parallel. Tests in a single file are run in order, in the same worker process.","sidebar":"docs"},"test-parameterize":{"id":"test-parameterize","title":"Parameterize tests","description":"You can either parameterize tests on a test level or on a project level.","sidebar":"docs"},"test-projects":{"id":"test-projects","title":"Projects","description":"A project is logical group of tests running with the same configuration. We use projects so we can run tests on different browsers and devices. Projects are configured in the playwright.config.ts file and once configured you can then run your tests on all projects or only on a specific project. You can also use projects to run the same tests in different configurations. For example, you can run the same tests in a logged-in and logged-out state.","sidebar":"docs"},"test-reporters":{"id":"test-reporters","title":"Reporters","description":"Playwright Test comes with a few built-in reporters for different needs and ability to provide custom reporters. The easiest way to try out built-in reporters is to pass --reporter command line option.","sidebar":"docs"},"test-retries":{"id":"test-retries","title":"Retries","description":"Test retries are a way to automatically re-run a test when it fails. This is useful when a test is flaky and fails intermittently. Test retries are configured in the configuration file.","sidebar":"docs"},"test-sharding":{"id":"test-sharding","title":"Sharding","description":"By default, Playwright runs tests in parallel and strives for optimal utilization of CPU cores on your machine. In order to achieve even greater parallelisation, you can further scale Playwright test execution by running tests on multiple machines simultaneously. We call this mode of operation \\"sharding\\".","sidebar":"docs"},"test-snapshots":{"id":"test-snapshots","title":"Visual comparisons","description":"Playwright Test includes the ability to produce and visually compare screenshots using await expect(page).toHaveScreenshot(). On first execution, Playwright test will generate reference screenshots. Subsequent runs will compare against the reference.","sidebar":"docs"},"test-timeouts":{"id":"test-timeouts","title":"Timeouts","description":"Playwright Test has multiple configurable timeouts for various tasks.","sidebar":"docs"},"test-typescript":{"id":"test-typescript","title":"TypeScript","description":"Playwright supports TypeScript out of the box. You just write tests in TypeScript, and Playwright will read them, transform to JavaScript and run.","sidebar":"docs"},"test-ui-mode":{"id":"test-ui-mode","title":"UI Mode","description":"UI Mode let\'s you explore, run and debug tests with a time travel experience complete with watch mode. All test files are loaded into the testing sidebar where you can expand each file and describe block to individually run, view, watch and debug each test. Filter tests by text or @tag or by passed, failed and skipped tests as well as by projects as set in your playwright.config file. See a full trace of your tests and hover back and forward over each action to see what was happening during each step and pop out the DOM snapshot to a separate window for a better debugging experience.","sidebar":"docs"},"test-use-options":{"id":"test-use-options","title":"Test use options","description":"In addition to configuring the test runner you can also configure Emulation, Network and Recording for the [Browser] or [BrowserContext]. These options are passed to the use: {} object in the Playwright config.","sidebar":"docs"},"test-webserver":{"id":"test-webserver","title":"Web server","description":"Playwright comes with a webserver option in the config file which gives you the ability to launch a local dev server before running your tests. This is ideal for when writing your tests during development and when you don\'t have a staging or production url to test against.","sidebar":"docs"},"testing-library":{"id":"testing-library","title":"Migrating from Testing Library","description":"- Migration principles","sidebar":"docs"},"trace-viewer":{"id":"trace-viewer","title":"Trace viewer","description":"Playwright Trace Viewer is a GUI tool that helps you explore recorded Playwright traces after the script has ran. You can open traces locally or in your browser on trace.playwright.dev.","sidebar":"docs"},"trace-viewer-intro":{"id":"trace-viewer-intro","title":"Trace viewer","description":"Playwright Trace Viewer is a GUI tool that lets you explore recorded Playwright traces of your tests meaning you can go back and forward through each action of your test and visually see what was happening during each action.","sidebar":"docs"},"videos":{"id":"videos","title":"Videos","description":"With Playwright you can record videos for your tests.","sidebar":"docs"},"webview2":{"id":"webview2","title":"WebView2","description":"The following will explain how to use Playwright with Microsoft Edge WebView2. WebView2 is a WinForms control, which will use Microsoft Edge under the hood to render web content. It is a part of the Microsoft Edge browser and is available on Windows 10 and Windows 11. Playwright can be used to automate WebView2 applications and can be used to test web content in WebView2. For connecting to WebView2, Playwright uses browserType.connectOverCDP() which connects to it via the Chrome DevTools Protocol (CDP).","sidebar":"docs"},"why-playwright":{"id":"why-playwright","title":"Why Playwright?","description":"Playwright enables fast, reliable and capable testing and automation across all modern browsers. This guide covers those key differentiators to help you decide on the right tool for your automated tests."},"writing-tests":{"id":"writing-tests","title":"Writing tests","description":"Playwright tests are simple, they","sidebar":"docs"}}}')}}]);